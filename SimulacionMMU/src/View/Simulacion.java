/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Logic.FIFO;
import Logic.MRUAlgoritmo;
import Logic.RandomAlgorithm;
import Logic.optimo;
import Model.MMU;
import Model.MMUu;
import Model.Pagina;
import Model.Proceso;
import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aldokler
 */
public class Simulacion extends javax.swing.JFrame {

    /**
     * Creates new form rfera
     */
    public Simulacion() {
        initComponents();
    }
    private static Timer timer;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OptRamTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        OtherRamTable = new javax.swing.JTable();
        labelOtherRam = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        OptMMUTable = new javax.swing.JTable(OptMMUModel);
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        OtherMMUTable = new javax.swing.JTable();
        labelOtherMMU = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        OptStats = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        labelOtherStats = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        OtherStats = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setEnabled(false);

        OptRamTable.setBackground(new java.awt.Color(230, 230, 230));
        OptRamTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        OptRamTable.setForeground(new java.awt.Color(0, 0, 0));
        OptRamTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        OptRamTable.setAutoscrolls(false);
        OptRamTable.setEnabled(false);
        OptRamTable.setFocusable(false);
        OptRamTable.setSelectionBackground(new java.awt.Color(187, 187, 187));
        OptRamTable.setShowGrid(true);
        jScrollPane1.setViewportView(OptRamTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("MMU - Óptimo");

        jScrollPane2.setEnabled(false);

        OtherRamTable.setBackground(new java.awt.Color(230, 230, 230));
        OtherRamTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        OtherRamTable.setForeground(new java.awt.Color(0, 0, 0));
        OtherRamTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        OtherRamTable.setAutoscrolls(false);
        OtherRamTable.setEnabled(false);
        OtherRamTable.setFocusable(false);
        OtherRamTable.setSelectionBackground(new java.awt.Color(187, 187, 187));
        OtherRamTable.setShowGrid(true);
        jScrollPane2.setViewportView(OtherRamTable);

        labelOtherRam.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        labelOtherRam.setText("RAM - Otro");

        jScrollPane4.setEnabled(false);

        OptMMUTable.setBackground(new java.awt.Color(230, 230, 230));
        OptMMUTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        OptMMUTable.setForeground(new java.awt.Color(0, 0, 0));
        OptMMUTable.setModel(OptMMUModel);
        OptMMUTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        OptMMUTable.setAutoscrolls(false);
        OptMMUTable.setSelectionBackground(new java.awt.Color(187, 187, 187));
        OptMMUTable.setShowGrid(true);
        jScrollPane4.setViewportView(OptMMUTable);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("RAM - Óptimo");

        jScrollPane5.setEnabled(false);

        OtherMMUTable.setBackground(new java.awt.Color(230, 230, 230));
        OtherMMUTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        OtherMMUTable.setForeground(new java.awt.Color(0, 0, 0));
        OtherMMUTable.setModel(OtherMMUModel);
        OtherMMUTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        OtherMMUTable.setAutoscrolls(false);
        OtherMMUTable.setSelectionBackground(new java.awt.Color(187, 187, 187));
        OtherMMUTable.setShowGrid(true);
        jScrollPane5.setViewportView(OtherMMUTable);

        labelOtherMMU.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        labelOtherMMU.setText("MMU - Otro");

        OptStats.setBackground(new java.awt.Color(230, 230, 230));
        OptStats.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        OptStats.setForeground(new java.awt.Color(0, 0, 0));
        OptStats.setModel(OptStatsModel);
        OptStats.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        OptStats.setAutoscrolls(false);
        OptStats.setSelectionBackground(new java.awt.Color(187, 187, 187));
        OptStats.setShowGrid(true);
        OptStats.getTableHeader().setResizingAllowed(false);
        OptStats.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(OptStats);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Estadísticas - Óptimo");

        labelOtherStats.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        labelOtherStats.setText("Estadísticas - Otro");

        jScrollPane7.setEnabled(false);

        OtherStats.setBackground(new java.awt.Color(230, 230, 230));
        OtherStats.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        OtherStats.setForeground(new java.awt.Color(0, 0, 0));
        OtherStats.setModel(OtherStatsModel);
        OtherStats.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        OtherStats.setAutoscrolls(false);
        OtherStats.setSelectionBackground(new java.awt.Color(187, 187, 187));
        OtherStats.setShowGrid(true);
        OtherStats.getTableHeader().setResizingAllowed(false);
        OtherStats.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(OtherStats);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelOtherRam)
                .addGap(217, 217, 217))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(190, 190, 190)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelOtherMMU)
                .addGap(210, 210, 210))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelOtherStats)
                .addGap(189, 189, 189))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelOtherRam)
                    .addComponent(jLabel3))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(labelOtherMMU))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelOtherStats)
                    .addComponent(jLabel5))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //cambia el color de una celda OwO
    //ram.setDefaultRenderer(Object.class, new CustomCellRenderer(row, column));
    static class CustomCellRenderer extends DefaultTableCellRenderer {

        private int row, column;
        private Color rgb;

        public CustomCellRenderer(int row, int column, Color rgb) {
            this.row = row;
            this.column = column;
            this.rgb = rgb;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public void setRGB(Color rgb) {
            this.rgb = rgb;
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            //System.out.println("Row = " + row + " | " + this.row + " Column = " + column + " | " + this.column);
            // Cambiar el color de fondo de la celda en la fila y columna objetivo
            if (this.row == row && this.column == column) {
                System.out.println("Cambió color");
                cellComponent.setBackground(this.rgb); ///Modificar esta linea para que sea el color del proceso con variables globales
            }/* else {
                // Restaurar el color de fondo predeterminado para otras celdas
                cellComponent.setBackground(table.getBackground());
            }
             */

            //cellComponent.setBackground(this.rgb);

            return cellComponent;
        }
    }

    /**
     * @param args the command line arguments
     * @param algoritmo
     * @param programa
     */
    public static void main(String args[], int algoritmo, ArrayList<Integer[]> programa) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MMUu OptMMU = new MMUu(programa);
                MMUu OtherMMU = new MMUu(algoritmo);

                Simulacion instance = new Simulacion();
                instance.setVisible(true);
                instance.changeLabel(algoritmo);

                CustomCellRenderer OptRamRenderer = new CustomCellRenderer(0, 0, new Color(255, 255, 255));
                CustomCellRenderer OptMMURenderer = new CustomCellRenderer(0, 0, new Color(255, 255, 255));
                CustomCellRenderer OtherRamRenderer = new CustomCellRenderer(0, 0, new Color(255, 255, 255));
                CustomCellRenderer OtherMMURenderer = new CustomCellRenderer(0, 0, new Color(255, 255, 255));

                instance.OptRamTable.setDefaultRenderer(Object.class, OptRamRenderer);
                instance.OptMMUTable.setDefaultRenderer(Object.class, OptMMURenderer);
                instance.OtherRamTable.setDefaultRenderer(Object.class, OtherRamRenderer);
                instance.OtherMMUTable.setDefaultRenderer(Object.class, OtherMMURenderer);
                
                // Configuración del temporizador para actualizar la interfaz a un ritmo de 70bpm (857)
                timer = new Timer(2500, new ActionListener() {
                    int page = 0;
                    Color pageColor = new Color(0, 0, 0);
                    int i = 0;
                    int contadorFila = 0;

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        // Actualizar la interfaz gráfica dentro del hilo de eventos de Swing
                        EventQueue.invokeLater(() -> {
                            if (i >= programa.size()) {
                                System.out.println("Simulación terminada");
                                timer.stop();
                                return;
                            }

                            int instruction = programa.get(i)[0];
                            int param = programa.get(i)[1];
                            int size = 0;
                            if (instruction == 1) {
                                size = programa.get(i)[2];
                            }
                            OptMMU.setInstruccionCounter(i);
                            System.out.println("Instruccion " + instruction + "  param " + param + "  size " + size);
                            switch (instruction) {
                                case 1 -> {
                                    OptMMU.New(param, size);
                                    OtherMMU.New(param, size);
                                }
                                case 2 -> {
                                    OptMMU.use(param);
                                    OtherMMU.use(param);
                                }
                                case 3 -> {
                                    OptMMU.delete(param);
                                    OtherMMU.delete(param);
                                }
                                case 4 -> {
                                    OptMMU.kill(param);
                                    OtherMMU.kill(param);
                                }
                            }


                            /*
*******************************************************************************************************************************************************                            
*******************************************************************************************************************************************************
*******************************************************************************************************************************************************
                             */
                            Pagina[] OptRam = OptMMU.getRam();
                            ArrayList<Proceso> OptProcessList = OptMMU.getProcesos();
                            for (Pagina p : OptMMU.getRam()) {
                                if (p != null) {
                                    System.out.println(p.getID());
                                } else {
                                    System.out.println("null");
                                }
                            }
                            for (int p = 0; p < OptRam.length; p++) {
                                page = p;
                                OptRamRenderer.setRow(page / 20);
                                OptRamRenderer.setColumn(page % 20);
                                if (OptRam[p] != null) {
                                    int procesoID = OptRam[p].getPID();
                                    for (Proceso proceso : OptProcessList) {
                                        if (proceso.getPid() == procesoID) {
                                            pageColor = proceso.getColor();
                                            break;
                                        }
                                    }
                                    instance.OptRamTable.setValueAt(procesoID, page / 20, page % 20);
                                } else {
                                    pageColor = new Color(255, 255, 255);
                                    instance.OptRamTable.setValueAt("", page / 20, page % 20);
                                }
                                OptRamRenderer.setRGB(pageColor);
                                instance.OptRamTable.repaint(instance.OptRamTable.getCellRect(page / 20, page % 20, false));
                            }
                            ArrayList<Pagina> OptDisk = OptMMU.getDisco();
                            int filas = instance.OptMMUModel.getRowCount();
                            for (int j = 0; j < filas; j++) {
                                instance.OptMMUModel.removeRow(0);
                            }
                            for (int p = 0; p < OptRam.length; p++, contadorFila++) {
                                if (OptRam[p] != null) {
                                    Object[] rowData = {
                                        OptRam[p].getID(),
                                        OptRam[p].getPID(),
                                        "X",
                                        OptRam[p].getID(),
                                        p,
                                        null,
                                        (OptMMU.getRelojS() - OptRam[p].getStime()) + "s",
                                        null
                                    };
                                    instance.OptMMUModel.addRow(rowData);

                                    OptMMURenderer.setRow(contadorFila);
                                    System.out.println(contadorFila);
                                    int procesoID = OptRam[p].getPID();
                                    for (Proceso proceso : OptProcessList) {
                                        if (proceso.getPid() == procesoID) {
                                            pageColor = proceso.getColor();
                                            break;
                                        }
                                    }
                                    for (int j = 0; j < 8; j++) {
                                        OptMMURenderer.setColumn(j);
                                        OptMMURenderer.setRGB(pageColor);
                                        //instance.OptMMUTable.setDefaultRenderer(Object.class, new CustomCellRenderer(pageColor));
                                        instance.OptMMUTable.repaint(instance.OptMMUTable.getCellRect(contadorFila, j, false));
                                    }
                                } else {
                                    contadorFila--;
                                }
                            }
                            for (Pagina p : OptDisk) {
                                Object[] rowData = {
                                    p.getID(),
                                    p.getPID(),
                                    null,
                                    p.getID(),
                                    null,
                                    p.getD_ADDR(),
                                    null,
                                    null
                                };
                                instance.OptMMUModel.addRow(rowData);

                                OptMMURenderer.setRow(contadorFila);
                                int procesoID = p.getPID();
                                for (Proceso proceso : OptProcessList) {
                                    if (proceso.getPid() == procesoID) {
                                        pageColor = proceso.getColor();
                                        break;
                                    }
                                }
                                for (int j = 0; j < 8; j++) {
                                    OptMMURenderer.setColumn(j);
                                    OptMMURenderer.setRGB(pageColor);
                                    //instance.OptMMUTable.setDefaultRenderer(Object.class, new CustomCellRenderer(pageColor));
                                    instance.OptMMUTable.repaint(instance.OptMMUTable.getCellRect(contadorFila, j, false));
                                }
                                contadorFila++;
                            }
                            if (instance.OptStatsModel.getRowCount() > 0) {
                                instance.OptStatsModel.removeRow(0);
                            }
                            Object[] rowData = {
                                OptMMU.getProcesos().size(),
                                i+1,
                                OptMMU.getRelojS(),
                                OptMMU.getMemoriaRamUsada(),
                                OptMMU.getMemoriaRamUsadaP(),
                                OptMMU.getMemoriaVirtualUsada(),
                                OptMMU.getMemoriaVirtualUsadaP(),
                                OptMMU.getnPaginaRam(),
                                100 - OptMMU.getnPaginaRam(),
                                OptMMU.getTiempoFallos(),
                                OptMMU.getTiempoFallosP() + "%",
                                OptMMU.getMemoriaDesperdiciada()
                            };
                            instance.OptStatsModel.addRow(rowData);

                            ((AbstractTableModel) instance.OptStats.getModel()).fireTableDataChanged();

                            /*
*******************************************************************************************************************************************************                            
*******************************************************************************************************************************************************
*******************************************************************************************************************************************************
                             */
                            contadorFila = 0;
                            /*
#######################################################################################################################################################
#######################################################################################################################################################
#######################################################################################################################################################
                             */

                            Pagina[] OtherRam = OtherMMU.getRam();
                            ArrayList<Proceso> OtherProcessList = OtherMMU.getProcesos();
                            for (int p = 0; p < OtherRam.length; p++) {
                                page = p;
                                OtherRamRenderer.setRow(page / 20);
                                OtherRamRenderer.setColumn(page % 20);
                                if (OtherRam[p] != null) {
                                    int procesoID = OtherRam[p].getPID();
                                    for (Proceso proceso : OtherProcessList) {
                                        if (proceso.getPid() == procesoID) {
                                            pageColor = proceso.getColor();
                                            break;
                                        }
                                    }
                                    instance.OtherRamTable.setValueAt(procesoID, page / 20, page % 20);
                                } else {
                                    pageColor = new Color(255, 255, 255);
                                    instance.OtherRamTable.setValueAt("", page / 20, page % 20);
                                }
                                OtherRamRenderer.setRGB(pageColor);
                                instance.OtherRamTable.repaint(instance.OtherRamTable.getCellRect(page / 20, page % 20, false));
                            }
                            ArrayList<Pagina> OtherDisk = OtherMMU.getDisco();
                            int filas1 = instance.OtherMMUModel.getRowCount();
                            for (int j = 0; j < filas1; j++) {
                                instance.OtherMMUModel.removeRow(0);
                            }
                            for (int p = 0; p < OtherRam.length; p++, contadorFila++) {
                                if (OtherRam[p] != null) {
                                    Object[] rowData1 = {
                                        OtherRam[p].getID(),
                                        OtherRam[p].getPID(),
                                        "X",
                                        OtherRam[p].getID(),
                                        p,
                                        null,
                                        (OtherMMU.getRelojS() - OtherRam[p].getStime()) + "s",
                                        null
                                    };
                                    if (algoritmo == 2 || algoritmo == 3) {
                                        rowData1[7] = OtherRam[p].getTime();
                                    }
                                    instance.OtherMMUModel.addRow(rowData1);

                                    OtherMMURenderer.setRow(contadorFila);
                                    int procesoID = OtherRam[p].getPID();
                                    for (Proceso proceso : OtherProcessList) {
                                        if (proceso.getPid() == procesoID) {
                                            pageColor = proceso.getColor();
                                            break;
                                        }
                                    }
                                    for (int j = 0; j < 8; j++) {
                                        OtherMMURenderer.setColumn(j);
                                        OtherMMURenderer.setRGB(pageColor);
                                        //instance.OtherMMUTable.setDefaultRenderer(Object.class, new CustomCellRenderer(pageColor));
                                        instance.OtherMMUTable.repaint(instance.OtherMMUTable.getCellRect(contadorFila, j, false));
                                    }
                                } else {
                                    contadorFila--;
                                }
                            }
                            for (Pagina p : OtherDisk) {
                                Object[] rowData1 = {
                                    p.getID(),
                                    p.getPID(),
                                    null,
                                    p.getID(),
                                    null,
                                    p.getD_ADDR(),
                                    null,
                                    null
                                };
                                if (algoritmo == 2 || algoritmo == 3) {
                                    rowData1[7] = p.getTime();
                                }
                                instance.OtherMMUModel.addRow(rowData1);

                                OtherMMURenderer.setRow(contadorFila);
                                int procesoID = p.getPID();
                                for (Proceso proceso : OtherProcessList) {
                                    if (proceso.getPid() == procesoID) {
                                        pageColor = proceso.getColor();
                                        break;
                                    }
                                }
                                for (int j = 0; j < 8; j++) {
                                    OtherMMURenderer.setColumn(j);
                                    OtherMMURenderer.setRGB(pageColor);
                                    //instance.OtherMMUTable.setDefaultRenderer(Object.class, new CustomCellRenderer(pageColor));
                                    instance.OtherMMUTable.repaint(instance.OtherMMUTable.getCellRect(contadorFila, j, false));
                                }

                                contadorFila++;
                            }
                            if (instance.OtherStatsModel.getRowCount() > 0) {
                                instance.OtherStatsModel.removeRow(0);
                            }
                            Object[] rowData1 = {
                                OtherMMU.getProcesos().size(),
                                i+1,
                                OtherMMU.getRelojS(),
                                OtherMMU.getMemoriaRamUsada(),
                                OtherMMU.getMemoriaRamUsadaP(),
                                OtherMMU.getMemoriaVirtualUsada(),
                                OtherMMU.getMemoriaVirtualUsadaP(),
                                OtherMMU.getnPaginaRam(),
                                100 - OtherMMU.getnPaginaRam(),
                                OtherMMU.getTiempoFallos(),
                                OtherMMU.getTiempoFallosP() + "%",
                                OtherMMU.getMemoriaDesperdiciada()
                            };
                            instance.OtherStatsModel.addRow(rowData1);

                            ((AbstractTableModel) instance.OtherStats.getModel()).fireTableDataChanged();

                            /*
#######################################################################################################################################################
#######################################################################################################################################################
#######################################################################################################################################################
                             */
                            i++;
                            System.out.println("Instrucción " + i + " procesada");
                        });
                    }
                });

                timer.start();
            }
        });

        /*
        for (Integer[] number : programa){
            System.out.println(Arrays.toString(number));
        }
         */
    }

    private void changeLabel(int algoritmo) {
        String text = "Otro";
        switch (algoritmo) {
            case 1 -> {
                text = "FIFO";
            }
            case 2 -> {
                text = "Second Chance";
            }
            case 3 -> {
                text = "MRU";
            }
            case 4 -> {
                text = "Random";
            }
        }
        labelOtherMMU.setText("MMU - " + text);
        labelOtherRam.setText("RAM - " + text);
        labelOtherStats.setText("Estadísticas - " + text);
    }

    /*    private void updateUI(MMU mmu, JTable MMUTable, JTable RamTable, JTable Stats, CustomCellRenderer renderer, Simulacion instance, int i) {
        Color pageColor = new Color(0, 0, 0);
        Pagina[] OptRam = OptMMU.getRam();
        ArrayList<Proceso> OptProcessList = OptMMU.getProcesos();
        for (int p = 0; p < OptRam.length; p++) {
            if (OptRam[i] != null) {
                int page = i;
                int procesoID = OptRam[i].getPID();
                for (Proceso proceso : OptProcessList) {
                    if (proceso.getPid() == procesoID) {
                        pageColor = proceso.getColor();
                        break;
                    }
                }
                renderer.setRow(page / 20);
                renderer.setColumn(page % 20);
                renderer.setRGB(pageColor);
                instance.OptRamTable.getColumnModel().getColumn(page % 20).setCellRenderer(renderer);
                ((AbstractTableModel) instance.OptRamTable.getModel()).fireTableCellUpdated(page / 20, page % 20);
            }
        }
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable OptMMUTable;
    private javax.swing.JTable OptRamTable;
    private javax.swing.JTable OptStats;
    private javax.swing.JTable OtherMMUTable;
    private javax.swing.JTable OtherRamTable;
    private javax.swing.JTable OtherStats;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel labelOtherMMU;
    private javax.swing.JLabel labelOtherRam;
    private javax.swing.JLabel labelOtherStats;
    // End of variables declaration//GEN-END:variables

    Object[] MMUModel = {"PAGE ID", "ID", "Loaded", "L-ADDR", "M-ADDR", "D-ADDR", "TIME", "MARK"};
    Object[] StatsModel = {"Procesos", "Operaciones", "Tiempo", "RAM KB", "RAM %", "V-RAM KB", "V-RAM %", "Págs en uso", "Págs libres", "Thrashing s", "Thrashing %", "Fragmentación"};

    DefaultTableModel OptMMUModel = new DefaultTableModel(MMUModel, 0);
    DefaultTableModel OptStatsModel = new DefaultTableModel(StatsModel, 0);
    DefaultTableModel OtherMMUModel = new DefaultTableModel(MMUModel, 0);
    DefaultTableModel OtherStatsModel = new DefaultTableModel(StatsModel, 0);
}
